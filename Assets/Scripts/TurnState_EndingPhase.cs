using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// 記憶の評価に応じて TRUE / GOOD / BAD エンディングを判定（改訂版）
/// </summary>
public class TurnState_EndingPhase : ITurnState
{
    public void OnStateEnter()
    {
        Debug.Log("【EndingPhase】評価開始");

        List<TurnDecision> logs = GameManager.Instance.GetDecisionLogs();

        int trueCount = 0;
        int goodCount = 0;

        foreach (var log in logs)
        {
            switch (log.targetCharacter.memoryReactionType)
            {
                case MemoryReactionType.True:
                    trueCount++;
                    break;
                case MemoryReactionType.Good:
                    goodCount++;
                    break;
            }
        }

        int totalCorrect = trueCount + goodCount;

        string endingId;
        if (trueCount == 3)
        {
            endingId = "TRUE_END"; // 完全救出（真エンド）
        }
        else if (totalCorrect >= 2)
        {
            endingId = "GOOD_END"; 
        }
        else
        {
            endingId = "BAD_END"; // 全滅
        }

        Debug.Log($"[評価結果] Ending ID: {endingId} (True: {trueCount}, Good: {goodCount}, Total: {totalCorrect})");

        NarrationPlayer.Instance.PlayNarration(
            GetNarrationForEnding(endingId),
            onComplete: () => EndingManager.Instance.LoadEndingScene(endingId)
        );
    }

    public void OnStateExit() { }

    public void NotifyCharacterTalked(CharacterDataJson character) { }

    public void NotifyMemoryUsed(CharacterDataJson from, CharacterDataJson to) { }

    public void NotifyTalkFinished(CharacterDataJson character) { }

    private string GetNarrationForEnding(string id)
    {
        return id switch
        {
            "TRUE_END" => "神の声：すべての記憶が正しい者へ届いた。希望は共有された。扉が開かれる…",
            "GOOD_END" => "神の声：記憶は一部に伝わった。救いは完全ではなかったが、わずかに道が残された。",
            "BAD_END" => "神の声：記憶は届かず、闇はそのまま続いた。誰も真実を知らないまま、終わりが訪れた。",
            _ => "神の声：物語は静かに幕を閉じた。"
        };
    }
}
